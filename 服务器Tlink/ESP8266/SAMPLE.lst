Interrupt Vectors
    00000 940C 004B JMP	__text_start|__start
    00024 940C 0149 JMP	_uart0_rx_isr
    0003A 940C 0103 JMP	_timer3_ovf_isr
    0003C 940C 01C5 JMP	_uart1_rx_isr

Program Code (text area)
__text_start|__start:
    0004B EFCF      LDI	R28,0xFF
    0004C E1D0      LDI	R29,0x10
    0004D BFCD      OUT	0x3D,R28
    0004E BFDE      OUT	0x3E,R29
    0004F 51CE      SUBI	R28,0x1E
    00050 40D0      SBCI	R29,0
    00051 EA0A      LDI	R16,0xAA
    00052 8308      ST	Y,R16
    00053 2400      CLR	R0
    00054 E0EA      LDI	R30,0xA
    00055 E0F1      LDI	R31,1
    00056 E01D      LDI	R17,0xD
    00057 30EA      CPI	R30,0xA
    00058 07F1      CPC	R31,R17
    00059 F011      BEQ	0x005C
    0005A 9201      ST	Z+,R0
    0005B CFFB      RJMP	0x0057
    0005C 8300      ST	Z,R16
    0005D E8EC      LDI	R30,0x8C
    0005E E0F0      LDI	R31,0
    0005F E0A0      LDI	R26,0
    00060 E0B1      LDI	R27,1
    00061 E010      LDI	R17,0
    00062 E000      LDI	R16,0
    00063 BF0B      OUT	0x3B,R16
    00064 39E6      CPI	R30,0x96
    00065 07F1      CPC	R31,R17
    00066 F021      BEQ	0x006B
    00067 95C8      LPM
    00068 9631      ADIW	R30,1
    00069 920D      ST	X+,R0
    0006A CFF9      RJMP	0x0064
    0006B 940E 012D CALL	_main
_exit:
    0006D CFFF      RJMP	_exit
FILE: H:\0物联网与传感技术备课用\000备课――刘伟\7无线~1\2ESP82~1\5ESP82~1\ESP8266\source\ESP8266.c
(0001) #include <iom64v.h>
(0002) #include <macros.h>
(0003) #include "ESP8266.h"
(0004) 
(0005) void espdelay(void)
(0006) {
(0007)   int i;
(0008)   for(i=0;i<2000;i++)
_espdelay:
  i                    --> R16
    0006E 2700      CLR	R16
    0006F 2711      CLR	R17
(0009)   {
(0010)     NOP();NOP();NOP();NOP();NOP();NOP();NOP();NOP();
    00070 0000      NOP
    00071 0000      NOP
    00072 0000      NOP
    00073 0000      NOP
    00074 0000      NOP
    00075 0000      NOP
    00076 0000      NOP
    00077 0000      NOP
(0011) 	NOP();NOP();NOP();NOP();NOP();NOP();NOP();NOP();
    00078 0000      NOP
    00079 0000      NOP
    0007A 0000      NOP
    0007B 0000      NOP
    0007C 0000      NOP
    0007D 0000      NOP
    0007E 0000      NOP
    0007F 0000      NOP
    00080 5F0F      SUBI	R16,0xFF
    00081 4F1F      SBCI	R17,0xFF
    00082 3D00      CPI	R16,0xD0
    00083 E0E7      LDI	R30,7
    00084 071E      CPC	R17,R30
    00085 F354      BLT	0x0070
    00086 9508      RET
_ESPSendByte:
  data                 --> R10
    00087 92AA      ST	-Y,R10
    00088 2EA0      MOV	R10,R16
(0012)   }
(0013) }
(0014) 
(0015) void ESPSendByte(unsigned char data)
(0016) {
(0017)    UDR1 = data;
    00089 92A0 009C STS	0x9C,R10
(0018)    while(!(UCSR1A&(1<<5)));
    0008B 9020 009B LDS	R2,0x9B
    0008D FE25      SBRS	R2,5
    0008E CFFC      RJMP	0x008B
(0019)    espdelay();
    0008F DFDE      RCALL	_espdelay
    00090 90A9      LD	R10,Y+
    00091 9508      RET
_ESPSendString:
  pstr                 --> R20
    00092 934A      ST	-Y,R20
    00093 935A      ST	-Y,R21
    00094 01A8      MOVW	R20,R16
(0020) }
(0021) 
(0022) void ESPSendString(unsigned char *pstr)
(0023) {
    00095 C005      RJMP	0x009B
(0024)    while(*pstr)
(0025)    {	  
(0026)       ESPSendByte(*pstr);
    00096 01FA      MOVW	R30,R20
    00097 8100      LD	R16,Z
    00098 DFEE      RCALL	_ESPSendByte
(0027)       pstr++;
    00099 5F4F      SUBI	R20,0xFF
    0009A 4F5F      SBCI	R21,0xFF
    0009B 01FA      MOVW	R30,R20
    0009C 8020      LD	R2,Z
    0009D 2022      TST	R2
    0009E F7B9      BNE	0x0096
    0009F 9159      LD	R21,Y+
    000A0 9149      LD	R20,Y+
    000A1 9508      RET
_delay:
  i                    --> R20
  ms                   --> R16
    000A2 934A      ST	-Y,R20
    000A3 935A      ST	-Y,R21
FILE: H:\0物联网与传感技术备课用\000备课――刘伟\7无线~1\2ESP82~1\5ESP82~1\ESP8266\source\main.c
(0001) //ICC-AVR application builder : 2015/8/10 13:48:34
(0002) // Target : M64
(0003) // Crystal: 16.000Mhz
(0004) 
(0005) #include <iom64v.h>
(0006) #include <macros.h>
(0007) #include "uart.h"
(0008) #include "ESP8266.h"
(0009) 
(0010) char time1sflag = 0;
(0011) 
(0012) void delay(int ms)
(0013) {
    000A4 C018      RJMP	0x00BD
(0014)   int i;
(0015)   while(ms--)
(0016)   {
(0017)     for(i=0;i<1000;i++)
    000A5 2744      CLR	R20
    000A6 2755      CLR	R21
(0018) 	{
(0019) 	 NOP();NOP();NOP();NOP();NOP();NOP();NOP();NOP();
    000A7 0000      NOP
    000A8 0000      NOP
    000A9 0000      NOP
    000AA 0000      NOP
    000AB 0000      NOP
    000AC 0000      NOP
    000AD 0000      NOP
    000AE 0000      NOP
(0020) 	 NOP();NOP();NOP();NOP();NOP();NOP();NOP();NOP();
    000AF 0000      NOP
    000B0 0000      NOP
    000B1 0000      NOP
    000B2 0000      NOP
    000B3 0000      NOP
    000B4 0000      NOP
    000B5 0000      NOP
    000B6 0000      NOP
    000B7 5F4F      SUBI	R20,0xFF
    000B8 4F5F      SBCI	R21,0xFF
    000B9 3E48      CPI	R20,0xE8
    000BA E0E3      LDI	R30,3
    000BB 075E      CPC	R21,R30
    000BC F354      BLT	0x00A7
    000BD 0118      MOVW	R2,R16
    000BE 5001      SUBI	R16,1
    000BF 4010      SBCI	R17,0
    000C0 2022      TST	R2
    000C1 F719      BNE	0x00A5
    000C2 2033      TST	R3
    000C3 F709      BNE	0x00A5
    000C4 9159      LD	R21,Y+
    000C5 9149      LD	R20,Y+
    000C6 9508      RET
(0021) 	}
(0022)   }
(0023) }
(0024) 
(0025) void port_init(void)
(0026) {
(0027)  PORTA = 0x00;
_port_init:
    000C7 2422      CLR	R2
    000C8 BA2B      OUT	0x1B,R2
(0028)  DDRA  = 0x00;
    000C9 BA2A      OUT	0x1A,R2
(0029)  PORTB = 0x00;
    000CA BA28      OUT	0x18,R2
(0030)  DDRB  = 0x00;
    000CB BA27      OUT	0x17,R2
(0031)  PORTC = 0x00; //m103 output only
    000CC BA25      OUT	0x15,R2
(0032)  DDRC  = 0x00;
    000CD BA24      OUT	0x14,R2
(0033)  PORTD = 0x00;
    000CE BA22      OUT	0x12,R2
(0034)  DDRD  = 0x00;
    000CF BA21      OUT	0x11,R2
(0035)  PORTE = 0x00;
    000D0 B823      OUT	0x03,R2
(0036)  DDRE  = 0x00;
    000D1 B822      OUT	0x02,R2
(0037)  PORTF = 0x00;
    000D2 9220 0062 STS	0x62,R2
(0038)  DDRF  = 0x00;
    000D4 9220 0061 STS	0x61,R2
(0039)  PORTG = 0x00;
    000D6 9220 0065 STS	0x65,R2
(0040)  DDRG  = 0x1F;
    000D8 E18F      LDI	R24,0x1F
    000D9 9380 0064 STS	0x64,R24
    000DB 9508      RET
(0041) }
(0042) 
(0043) //TIMER3 initialize - prescale:1024
(0044) // WGM: 0) Normal, TOP=0xFFFF
(0045) // desired value: 1Hz
(0046) // actual value:  1.000Hz (0.0%)
(0047) void timer3_init(void)
(0048) {
(0049)  TCCR3B = 0x00; //stop
_timer3_init:
    000DC 2422      CLR	R2
    000DD 9220 008A STS	0x8A,R2
(0050)  TCNT3H = 0xC2; //setup
    000DF EC82      LDI	R24,0xC2
    000E0 9380 0089 STS	0x89,R24
(0051)  TCNT3L = 0xF7;
    000E2 EF87      LDI	R24,0xF7
    000E3 9380 0088 STS	0x88,R24
(0052)  OCR3AH = 0x3D;
    000E5 E38D      LDI	R24,0x3D
    000E6 9380 0087 STS	0x87,R24
(0053)  OCR3AL = 0x09;
    000E8 E089      LDI	R24,0x9
    000E9 9380 0086 STS	0x86,R24
(0054)  OCR3BH = 0x3D;
    000EB E38D      LDI	R24,0x3D
    000EC 9380 0085 STS	0x85,R24
(0055)  OCR3BL = 0x09;
    000EE E089      LDI	R24,0x9
    000EF 9380 0084 STS	0x84,R24
(0056)  OCR3CH = 0x3D;
    000F1 E38D      LDI	R24,0x3D
    000F2 9380 0083 STS	0x83,R24
(0057)  OCR3CL = 0x09;
    000F4 E089      LDI	R24,0x9
    000F5 9380 0082 STS	0x82,R24
(0058)  ICR3H  = 0x3D;
    000F7 E38D      LDI	R24,0x3D
    000F8 9380 0081 STS	0x81,R24
(0059)  ICR3L  = 0x09;
    000FA E089      LDI	R24,0x9
    000FB 9380 0080 STS	0x80,R24
(0060)  TCCR3A = 0x00;
    000FD 9220 008B STS	0x8B,R2
(0061)  TCCR3B = 0x05; //start Timer
    000FF E085      LDI	R24,5
    00100 9380 008A STS	0x8A,R24
    00102 9508      RET
_timer3_ovf_isr:
    00103 922A      ST	-Y,R2
    00104 938A      ST	-Y,R24
    00105 B62F      IN	R2,0x3F
    00106 922A      ST	-Y,R2
(0062) }
(0063) 
(0064) #pragma interrupt_handler timer3_ovf_isr:iv_TIM3_OVF
(0065) void timer3_ovf_isr(void)
(0066) {
(0067)  //TIMER3 has overflowed
(0068)  TCNT3H = 0xC2; //reload counter high value
    00107 EC82      LDI	R24,0xC2
    00108 9380 0089 STS	0x89,R24
(0069)  TCNT3L = 0xF7; //reload counter low value
    0010A EF87      LDI	R24,0xF7
    0010B 9380 0088 STS	0x88,R24
(0070)  time1sflag = 1;
    0010D E081      LDI	R24,1
    0010E 9380 0100 STS	time1sflag,R24
(0071)  PORTG ^= 0X01;
    00110 9020 0065 LDS	R2,0x65
    00112 2628      EOR	R2,R24
    00113 9220 0065 STS	0x65,R2
    00115 9029      LD	R2,Y+
    00116 BE2F      OUT	0x3F,R2
    00117 9189      LD	R24,Y+
    00118 9029      LD	R2,Y+
    00119 9518      RETI
(0072) }
(0073) 
(0074) //call this routine to initialize all peripherals
(0075) void init_devices(void)
(0076) {
(0077)  //stop errant interrupts until set up
(0078)  CLI(); //disable all interrupts
_init_devices:
    0011A 94F8      BCLR	7
(0079)  XDIV  = 0x00; //xtal divider
    0011B 2422      CLR	R2
    0011C BE2C      OUT	0x3C,R2
(0080)  XMCRA = 0x00; //external memory
    0011D 9220 006D STS	0x6D,R2
(0081)  port_init();
    0011F DFA7      RCALL	_port_init
(0082)  //timer3_init();
(0083)  uart0_init();
    00120 940E 013C CALL	_uart0_init
(0084)  uart1_init();
    00122 940E 01B4 CALL	_uart1_init
(0085) 
(0086)  MCUCR = 0x00;
    00124 2422      CLR	R2
    00125 BE25      OUT	0x35,R2
(0087)  EICRA = 0x00; //extended ext ints
    00126 9220 006A STS	0x6A,R2
(0088)  EICRB = 0x00; //extended ext ints
    00128 BE2A      OUT	0x3A,R2
(0089)  EIMSK = 0x00;
    00129 BE29      OUT	0x39,R2
(0090)  TIMSK = 0x00; //timer interrupt sources
    0012A BE27      OUT	0x37,R2
(0091)  //ETIMSK = 0x04; //extended timer interrupt sources
(0092)  SEI(); //re-enable interrupts
    0012B 9478      BSET	7
    0012C 9508      RET
_main:
  p                    --> Y,+1
  num                  --> Y,+4
  i                    --> Y,+0
    0012D 9728      SBIW	R28,0x8
(0093)  //all peripherals are now initialized
(0094) }
(0095) unsigned char buf[1024];
(0096) int main(void)
(0097) {
(0098)   long i=0;
    0012E E080      LDI	R24,0
    0012F 8388      ST	Y,R24
    00130 8389      STD	Y+1,R24
    00131 838A      STD	Y+2,R24
    00132 838B      STD	Y+3,R24
(0099)   unsigned char *p;
(0100)   long num=0;
    00133 E080      LDI	R24,0
    00134 838C      STD	Y+4,R24
    00135 838D      STD	Y+5,R24
    00136 838E      STD	Y+6,R24
    00137 838F      STD	Y+7,R24
(0101)   init_devices();
    00138 DFE1      RCALL	_init_devices
(0102)   //PrintString("ESP8266 test!\r\n");
(0103)   //ESPSendString("AT+CWJAP=\"NETGEAR\",\"\"\r\n");
(0104)   //delay(5000);
(0105)   //PrintString("ESP8266 ok!\r\n");
(0106)   while(1)
    00139 CFFF      RJMP	0x0139
    0013A 9628      ADIW	R28,0x8
    0013B 9508      RET
FILE: H:\0物联网与传感技术备课用\000备课――刘伟\7无线~1\2ESP82~1\5ESP82~1\ESP8266\source\uart.c
(0001) // Crystal: 16.000Mhz
(0002) 
(0003) #include <iom64v.h>
(0004) #include <macros.h>
(0005) #include <string.h>
(0006) #include "uart.h"
(0007) 
(0008) //unsigned char espbuf[1024];
(0009) unsigned long espbufcount = 0;
(0010) unsigned char esplineflag = 0;
(0011)  int j=0,q=0;
(0012)  unsigned char str[1024];
(0013)  unsigned char str1[1024];
(0014) //UART0 initialize
(0015) // desired baud rate: 9600
(0016) // actual: baud rate:9615 (0.2%)
(0017) // char size: 8 bit
(0018) // parity: Disabled
(0019) void uart0_init(void)//连接电脑
(0020) {
(0021)  UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    0013C 2422      CLR	R2
    0013D B82A      OUT	0x0A,R2
(0022)  UCSR0A = 0x00;
    0013E B82B      OUT	0x0B,R2
(0023)  UCSR0C = 0x06;
    0013F E086      LDI	R24,6
    00140 9380 0095 STS	0x95,R24
(0024)  UBRR0L = 0x67; //set baud rate lo
    00142 E687      LDI	R24,0x67
    00143 B989      OUT	0x09,R24
(0025)  UBRR0H = 0x00; //set baud rate hi
    00144 9220 0090 STS	0x90,R2
(0026)  UCSR0B = 0x98;
    00146 E988      LDI	R24,0x98
    00147 B98A      OUT	0x0A,R24
    00148 9508      RET
_uart0_rx_isr:
  i                    --> Y,+1
  data                 --> R10
  k                    --> R20
    00149 920A      ST	-Y,R0
    0014A 921A      ST	-Y,R1
    0014B 922A      ST	-Y,R2
    0014C 923A      ST	-Y,R3
    0014D 924A      ST	-Y,R4
    0014E 925A      ST	-Y,R5
    0014F 926A      ST	-Y,R6
    00150 927A      ST	-Y,R7
    00151 928A      ST	-Y,R8
    00152 929A      ST	-Y,R9
    00153 930A      ST	-Y,R16
    00154 931A      ST	-Y,R17
    00155 932A      ST	-Y,R18
    00156 933A      ST	-Y,R19
    00157 938A      ST	-Y,R24
    00158 939A      ST	-Y,R25
    00159 93AA      ST	-Y,R26
    0015A 93BA      ST	-Y,R27
    0015B 93EA      ST	-Y,R30
    0015C 93FA      ST	-Y,R31
    0015D B60F      IN	R0,0x3F
    0015E 920A      ST	-Y,R0
    0015F 940E 025C CALL	push_xgset300C
(0027) }
(0028) 
(0029) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0030) void uart0_rx_isr(void)
(0031) {
(0032)  //uart has received a character in UDR
(0033)  unsigned char data;
(0034)  int k,i;
(0035)  data=UDR0;
    00161 B0AC      IN	R10,0x0C
(0036)  str[j]=data;
    00162 E08A      LDI	R24,0xA
    00163 E099      LDI	R25,0x9
    00164 91E0 0106 LDS	R30,j
    00166 91F0 0107 LDS	R31,j+1
    00168 0FE8      ADD	R30,R24
    00169 1FF9      ADC	R31,R25
    0016A 82A0      ST	Z,R10
(0037)  j++;
    0016B 9180 0106 LDS	R24,j
    0016D 9190 0107 LDS	R25,j+1
    0016F 9601      ADIW	R24,1
    00170 9390 0107 STS	j+1,R25
    00172 9380 0106 STS	j,R24
(0038)  if(str[j]=='\0')
    00174 E08A      LDI	R24,0xA
    00175 E099      LDI	R25,0x9
    00176 91E0 0106 LDS	R30,j
    00178 91F0 0107 LDS	R31,j+1
    0017A 0FE8      ADD	R30,R24
    0017B 1FF9      ADC	R31,R25
    0017C 8020      LD	R2,Z
    0017D 2022      TST	R2
    0017E F4E1      BNE	0x019B
(0039)  {
(0040)  PrintString1(str);
    0017F E00A      LDI	R16,0xA
    00180 E019      LDI	R17,0x9
    00181 D0CA      RCALL	_PrintString1
(0041)  for(k=0;k<j;k++)
    00182 2744      CLR	R20
    00183 2755      CLR	R21
    00184 C009      RJMP	0x018E
(0042)  {
(0043)   	str[k]=0;
    00185 E08A      LDI	R24,0xA
    00186 E099      LDI	R25,0x9
    00187 01FA      MOVW	R30,R20
    00188 0FE8      ADD	R30,R24
    00189 1FF9      ADC	R31,R25
    0018A 2422      CLR	R2
    0018B 8220      ST	Z,R2
    0018C 5F4F      SUBI	R20,0xFF
    0018D 4F5F      SBCI	R21,0xFF
    0018E 9020 0106 LDS	R2,j
    00190 9030 0107 LDS	R3,j+1
    00192 1542      CP	R20,R2
    00193 0553      CPC	R21,R3
    00194 F384      BLT	0x0185
(0044)  }
(0045)  j=0;
    00195 2422      CLR	R2
    00196 2433      CLR	R3
    00197 9230 0107 STS	j+1,R3
    00199 9220 0106 STS	j,R2
(0046)  }
    0019B 940E 0261 CALL	pop_xgset300C
    0019D 9009      LD	R0,Y+
    0019E BE0F      OUT	0x3F,R0
    0019F 91F9      LD	R31,Y+
    001A0 91E9      LD	R30,Y+
    001A1 91B9      LD	R27,Y+
    001A2 91A9      LD	R26,Y+
    001A3 9199      LD	R25,Y+
    001A4 9189      LD	R24,Y+
    001A5 9139      LD	R19,Y+
    001A6 9129      LD	R18,Y+
    001A7 9119      LD	R17,Y+
    001A8 9109      LD	R16,Y+
    001A9 9099      LD	R9,Y+
    001AA 9089      LD	R8,Y+
    001AB 9079      LD	R7,Y+
    001AC 9069      LD	R6,Y+
    001AD 9059      LD	R5,Y+
    001AE 9049      LD	R4,Y+
    001AF 9039      LD	R3,Y+
    001B0 9029      LD	R2,Y+
    001B1 9019      LD	R1,Y+
    001B2 9009      LD	R0,Y+
    001B3 9518      RETI
(0047) }
(0048) 
(0049) //UART1 initialize
(0050) // desired baud rate:9600
(0051) // actual baud rate:9615 (0.2%)
(0052) // char size: 8 bit
(0053) // parity: Disabled
(0054) void uart1_init(void)
(0055) {
(0056)  UCSR1B = 0x00; //disable while setting baud rate
_uart1_init:
    001B4 2422      CLR	R2
    001B5 9220 009A STS	0x9A,R2
(0057)  UCSR1A = 0x00;
    001B7 9220 009B STS	0x9B,R2
(0058)  UCSR1C = 0x06;
    001B9 E086      LDI	R24,6
    001BA 9380 009D STS	0x9D,R24
(0059)  UBRR1L = 0x67; //set baud rate lo
    001BC E687      LDI	R24,0x67
    001BD 9380 0099 STS	0x99,R24
(0060)  UBRR1H = 0x00; //set baud rate hi
    001BF 9220 0098 STS	0x98,R2
(0061)  UCSR1B = 0x98;
    001C1 E988      LDI	R24,0x98
    001C2 9380 009A STS	0x9A,R24
    001C4 9508      RET
_uart1_rx_isr:
  data                 --> R10
  k                    --> R20
    001C5 920A      ST	-Y,R0
    001C6 921A      ST	-Y,R1
    001C7 922A      ST	-Y,R2
    001C8 923A      ST	-Y,R3
    001C9 924A      ST	-Y,R4
    001CA 925A      ST	-Y,R5
    001CB 926A      ST	-Y,R6
    001CC 927A      ST	-Y,R7
    001CD 928A      ST	-Y,R8
    001CE 929A      ST	-Y,R9
    001CF 930A      ST	-Y,R16
    001D0 931A      ST	-Y,R17
    001D1 932A      ST	-Y,R18
    001D2 933A      ST	-Y,R19
    001D3 938A      ST	-Y,R24
    001D4 939A      ST	-Y,R25
    001D5 93AA      ST	-Y,R26
    001D6 93BA      ST	-Y,R27
    001D7 93EA      ST	-Y,R30
    001D8 93FA      ST	-Y,R31
    001D9 B60F      IN	R0,0x3F
    001DA 920A      ST	-Y,R0
    001DB 940E 025C CALL	push_xgset300C
(0062) }
(0063) /*
(0064) void uart1_init(void)
(0065) {
(0066)  UCSR1B = 0x00; //disable while setting baud rate
(0067)  UCSR1A = 0x00;
(0068)  UCSR1C = 0x06;
(0069)  UBRR1L = 0x67; //set baud rate lo
(0070)  UBRR1H = 0x00; //set baud rate hi
(0071)  UCSR1B = 0x98;
(0072) }
(0073) */
(0074) //unsigned char buf[1024];//////////
(0075) #pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
(0076) void uart1_rx_isr(void)
(0077) {
(0078)  //uart has received a character in UDR
(0079)  unsigned char data;
(0080)  int k;
(0081)  data = UDR1;
    001DD 90A0 009C LDS	R10,0x9C
(0082)  str1[q]=data;
    001DF E08A      LDI	R24,0xA
    001E0 E095      LDI	R25,5
    001E1 91E0 0108 LDS	R30,q
    001E3 91F0 0109 LDS	R31,q+1
    001E5 0FE8      ADD	R30,R24
    001E6 1FF9      ADC	R31,R25
    001E7 82A0      ST	Z,R10
(0083)  q++;
    001E8 9180 0108 LDS	R24,q
    001EA 9190 0109 LDS	R25,q+1
    001EC 9601      ADIW	R24,1
    001ED 9390 0109 STS	q+1,R25
    001EF 9380 0108 STS	q,R24
(0084)  if(str1[q]=='\0')
    001F1 E08A      LDI	R24,0xA
    001F2 E095      LDI	R25,5
    001F3 91E0 0108 LDS	R30,q
    001F5 91F0 0109 LDS	R31,q+1
    001F7 0FE8      ADD	R30,R24
    001F8 1FF9      ADC	R31,R25
    001F9 8020      LD	R2,Z
    001FA 2022      TST	R2
    001FB F4E1      BNE	0x0218
(0085)  {
(0086)  PrintString(str1);
    001FC E00A      LDI	R16,0xA
    001FD E015      LDI	R17,5
    001FE D036      RCALL	_PrintString
(0087)  for(k=0;k<q;k++)
    001FF 2744      CLR	R20
    00200 2755      CLR	R21
    00201 C009      RJMP	0x020B
(0088)  {
(0089)   	str1[k]=0;
    00202 E08A      LDI	R24,0xA
    00203 E095      LDI	R25,5
    00204 01FA      MOVW	R30,R20
    00205 0FE8      ADD	R30,R24
    00206 1FF9      ADC	R31,R25
    00207 2422      CLR	R2
    00208 8220      ST	Z,R2
    00209 5F4F      SUBI	R20,0xFF
    0020A 4F5F      SBCI	R21,0xFF
    0020B 9020 0108 LDS	R2,q
    0020D 9030 0109 LDS	R3,q+1
    0020F 1542      CP	R20,R2
    00210 0553      CPC	R21,R3
    00211 F384      BLT	0x0202
(0090)  }
(0091)  q=0;
    00212 2422      CLR	R2
    00213 2433      CLR	R3
    00214 9230 0109 STS	q+1,R3
    00216 9220 0108 STS	q,R2
(0092)  }
    00218 940E 0261 CALL	pop_xgset300C
    0021A 9009      LD	R0,Y+
    0021B BE0F      OUT	0x3F,R0
    0021C 91F9      LD	R31,Y+
    0021D 91E9      LD	R30,Y+
    0021E 91B9      LD	R27,Y+
    0021F 91A9      LD	R26,Y+
    00220 9199      LD	R25,Y+
    00221 9189      LD	R24,Y+
    00222 9139      LD	R19,Y+
    00223 9129      LD	R18,Y+
    00224 9119      LD	R17,Y+
    00225 9109      LD	R16,Y+
    00226 9099      LD	R9,Y+
    00227 9089      LD	R8,Y+
    00228 9079      LD	R7,Y+
    00229 9069      LD	R6,Y+
    0022A 9059      LD	R5,Y+
    0022B 9049      LD	R4,Y+
    0022C 9039      LD	R3,Y+
    0022D 9029      LD	R2,Y+
    0022E 9019      LD	R1,Y+
    0022F 9009      LD	R0,Y+
    00230 9518      RETI
(0093) }
(0094) 
(0095) void UartSendByte(unsigned char data)
(0096) {
(0097)    UDR0 = data;
_UartSendByte:
  data                 --> R16
    00231 B90C      OUT	0x0C,R16
(0098)    while(!(UCSR0A&(1<<5)));
    00232 9B5D      SBIS	0x0B,5
    00233 CFFE      RJMP	0x0232
    00234 9508      RET
_PrintString:
  pstr                 --> R20
    00235 934A      ST	-Y,R20
    00236 935A      ST	-Y,R21
    00237 01A8      MOVW	R20,R16
(0099) }
(0100) 
(0101) void PrintString(unsigned char *pstr)
(0102) {
    00238 C005      RJMP	0x023E
(0103)    while(*pstr)
(0104)    {	  
(0105)       UartSendByte(*pstr);
    00239 01FA      MOVW	R30,R20
    0023A 8100      LD	R16,Z
    0023B DFF5      RCALL	_UartSendByte
(0106)       pstr++;
    0023C 5F4F      SUBI	R20,0xFF
    0023D 4F5F      SBCI	R21,0xFF
    0023E 01FA      MOVW	R30,R20
    0023F 8020      LD	R2,Z
    00240 2022      TST	R2
    00241 F7B9      BNE	0x0239
    00242 9159      LD	R21,Y+
    00243 9149      LD	R20,Y+
    00244 9508      RET
(0107)    }
(0108) }
(0109) 
(0110) void UartSendByte1(unsigned char data)
(0111) {
(0112)    UDR1 = data;
_UartSendByte1:
  data                 --> R16
    00245 9300 009C STS	0x9C,R16
(0113)    while(!(UCSR1A&(1<<5)));
    00247 9020 009B LDS	R2,0x9B
    00249 FE25      SBRS	R2,5
    0024A CFFC      RJMP	0x0247
    0024B 9508      RET
_PrintString1:
  pstr                 --> R20
    0024C 934A      ST	-Y,R20
    0024D 935A      ST	-Y,R21
    0024E 01A8      MOVW	R20,R16
(0114) }
(0115) 
(0116) void PrintString1(unsigned char *pstr)
(0117) {
    0024F C005      RJMP	0x0255
(0118)    while(*pstr)
(0119)    {	  
(0120)       UartSendByte1(*pstr);
    00250 01FA      MOVW	R30,R20
    00251 8100      LD	R16,Z
    00252 DFF2      RCALL	_UartSendByte1
(0121)       pstr++;
FILE: <library>
    00253 5F4F      SUBI	R20,0xFF
    00254 4F5F      SBCI	R21,0xFF
    00255 01FA      MOVW	R30,R20
    00256 8020      LD	R2,Z
    00257 2022      TST	R2
    00258 F7B9      BNE	0x0250
    00259 9159      LD	R21,Y+
    0025A 9149      LD	R20,Y+
    0025B 9508      RET
push_xgset300C:
    0025C 935A      ST	-Y,R21
    0025D 934A      ST	-Y,R20
    0025E 92BA      ST	-Y,R11
    0025F 92AA      ST	-Y,R10
    00260 9508      RET
pop_xgset300C:
    00261 90A9      LD	R10,Y+
    00262 90B9      LD	R11,Y+
    00263 9149      LD	R20,Y+
    00264 9159      LD	R21,Y+
    00265 9508      RET
