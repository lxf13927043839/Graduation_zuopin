// Crystal: 16.000Mhz

#include <iom64v.h>
#include <macros.h>
#include "uart.h"

unsigned char espbuf[100];
unsigned char espbufcount = 0;
unsigned char esplineflag = 0;

//UART0 initialize
// desired baud rate: 9600
// actual: baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
 UCSR0A = 0x00;
 UCSR0C = 0x06;
 UBRR0L = 0x67; //set baud rate lo
 UBRR0H = 0x00; //set baud rate hi
 UCSR0B = 0x98;
}

#pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
void uart0_rx_isr(void)
{
 //uart has received a character in UDR
 unsigned char data;
 data = UDR0;
 UDR1 = data;
}

//UART1 initialize
// desired baud rate:9600
// actual baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart1_init(void)
{
 UCSR1B = 0x00; //disable while setting baud rate
 UCSR1A = 0x00;
 UCSR1C = 0x06;
 UBRR1L = 0x67; //set baud rate lo
 UBRR1H = 0x00; //set baud rate hi
 UCSR1B = 0x98;
}

#pragma interrupt_handler uart1_rx_isr:iv_USART1_RXC
void uart1_rx_isr(void)
{
 //uart has received a character in UDR
 unsigned char data;
 data = UDR1;
 UDR0 = data;
 /*
 switch(esplineflag)
 {
   case 0:  
     espbuf[espbufcount] = data;
     espbufcount++;
   break;
   
   case 1:
   break;
   
   case 2:
   break;
   
   default:
   break;
 }*/
}

unsigned char *espgetline(void)
{
  espbufcount=0;
  return espbuf;
}


void UartSendByte(unsigned char data)
{
   UDR0 = data;
   while(!(UCSR0A&(1<<5)));
}

void PrintString(unsigned char *pstr)
{
   while(*pstr)
   {	  
      UartSendByte(*pstr);
      pstr++;
   }
}
